// frontend/src/services/databaseWordService.ts
// üéØ Service frontend pour r√©cup√©rer les mots de la BDD

import { DifficultyLevel } from '../types/game';
import { Language } from '../i18n/translations';

interface WordResponse {
  success: boolean;
  word: string;
  length: number;
  difficulty: number;
  frequency: number;
  meta: {
    requestedDifficulty: string;
    language: string;
    level: number;
  };
}

interface BatchWordsResponse {
  success: boolean;
  words: Array<{
    text: string;
    length: number;
    difficulty: number;
  }>;
  count: number;
  meta: {
    requestedDifficulty: string;
    language: string;
    level: number;
  };
}

class DatabaseWordService {
  private baseUrl: string;
  private cache = new Map<string, { words: string[]; timestamp: number }>();
  private cacheTimeout = 30 * 1000; // 30 secondes seulement

  constructor() {
    this.baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';
  }

  // üßπ Nettoyer les accents et caract√®res sp√©ciaux
  private normalizeWord(word: string): string {
    return word
      .toUpperCase()
      .replace(/[√Ä-√ø]/g, (match) => {
        // Table de conversion des accents
        const accentMap: { [key: string]: string } = {
          '√Ä': 'A', '√Å': 'A', '√Ç': 'A', '√É': 'A', '√Ñ': 'A', '√Ö': 'A',
          '√Ü': 'AE', '√á': 'C', '√à': 'E', '√â': 'E', '√ä': 'E', '√ã': 'E',
          '√å': 'I', '√ç': 'I', '√é': 'I', '√è': 'I', '√ê': 'D', '√ë': 'N',
          '√í': 'O', '√ì': 'O', '√î': 'O', '√ï': 'O', '√ñ': 'O', '√ò': 'O',
          '√ô': 'U', '√ö': 'U', '√õ': 'U', '√ú': 'U', '√ù': 'Y', '√û': 'TH',
          '√ü': 'SS', '√†': 'A', '√°': 'A', '√¢': 'A', '√£': 'A', '√§': 'A',
          '√•': 'A', '√¶': 'AE', '√ß': 'C', '√®': 'E', '√©': 'E', '√™': 'E',
          '√´': 'E', '√¨': 'I', '√≠': 'I', '√Æ': 'I', '√Ø': 'I', '√∞': 'D',
          '√±': 'N', '√≤': 'O', '√≥': 'O', '√¥': 'O', '√µ': 'O', '√∂': 'O',
          '√∏': 'O', '√π': 'U', '√∫': 'U', '√ª': 'U', '√º': 'U', '√Ω': 'Y',
          '√æ': 'TH', '√ø': 'Y'
        };
        return accentMap[match] || match;
      })
      .replace(/[^A-Z0-9]/g, ''); // Supprimer tout sauf lettres et chiffres
  }

  // üéØ R√©cup√©rer un mot al√©atoire
  async getRandomWord(
    difficulty: DifficultyLevel, 
    language: Language = 'fr', 
    level: number = 1
  ): Promise<string> {
    const cacheKey = `${difficulty}-${language}-${level}`;
    
    // V√©rifier le cache (tr√®s court pour plus de vari√©t√©)
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey)!;
      if (Date.now() - cached.timestamp < this.cacheTimeout && cached.words.length > 0) {
        // Prendre un mot al√©atoire du cache
        const randomIndex = Math.floor(Math.random() * cached.words.length);
        const word = cached.words[randomIndex];
        // Retirer le mot du cache pour √©viter les r√©p√©titions
        cached.words.splice(randomIndex, 1);
        return this.normalizeWord(word);
      }
    }

    try {
      // R√©cup√©rer un batch de mots pour remplir le cache
      const response = await fetch(
        `${this.baseUrl}/game-words/batch?difficulty=${difficulty}&language=${language}&level=${level}&count=20`
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data: BatchWordsResponse = await response.json();

      if (!data.success || !data.words || data.words.length === 0) {
        throw new Error('R√©ponse API invalide');
      }

      // M√©langer les mots
      const shuffledWords = data.words
        .map(w => w.text)
        .sort(() => Math.random() - 0.5);

      // Mettre en cache
      this.cache.set(cacheKey, {
        words: shuffledWords,
        timestamp: Date.now()
      });

      // Retourner le premier mot normalis√©
      const firstWord = shuffledWords[0];
      return this.normalizeWord(firstWord);

    } catch (error) {
      console.warn('Erreur API mots, fallback vers statique:', error);
      return this.getStaticFallback(difficulty, language);
    }
  }

  // üîÑ R√©cup√©rer plusieurs mots d'un coup
  async getBatchWords(
    difficulty: DifficultyLevel,
    language: Language = 'fr',
    level: number = 1,
    count: number = 10
  ): Promise<string[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/game-words/batch?difficulty=${difficulty}&language=${language}&level=${level}&count=${count}`
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data: BatchWordsResponse = await response.json();

      if (!data.success || !data.words) {
        throw new Error('R√©ponse API invalide');
      }

      return data.words.map(w => this.normalizeWord(w.text));

    } catch (error) {
      console.warn('Erreur API batch, fallback vers statique:', error);
      // Retourner plusieurs mots statiques
      const words: string[] = [];
      for (let i = 0; i < count; i++) {
        words.push(this.getStaticFallback(difficulty, language));
      }
      return words;
    }
  }

  // üîô Mots statiques de secours
  private getStaticFallback(difficulty: DifficultyLevel, language: Language): string {
    const staticWords = {
      fr: {
        easy: ['CHAT', 'CHIEN', 'SOLEIL', 'JEU', 'AUTO', 'ROUGE'],
        normal: ['MAISON', 'JARDIN', 'MUSIQUE', 'DANSE', 'NATURE', 'FLEUR'],
        hard: ['TECHNOLOGIE', 'ORDINATEUR', 'PROGRAMMATION', 'ARCHITECTURE'],
        expert: ['IMPLEMENTATION', 'SYNCHRONISATION', 'CONFIGURATION', 'INTERNATIONAL']
      },
      en: {
        easy: ['CAT', 'DOG', 'SUN', 'GAME', 'CAR', 'RED'],
        normal: ['HOUSE', 'GARDEN', 'MUSIC', 'DANCE', 'NATURE', 'FLOWER'],
        hard: ['TECHNOLOGY', 'COMPUTER', 'PROGRAMMING', 'ARCHITECTURE'],
        expert: ['IMPLEMENTATION', 'SYNCHRONIZATION', 'CONFIGURATION', 'INTERNATIONAL']
      }
    };

    const words = staticWords[language]?.[difficulty] || staticWords.fr.normal;
    const randomIndex = Math.floor(Math.random() * words.length);
    return words[randomIndex];
  }

  // üßπ Nettoyer le cache
  clearCache(): void {
    this.cache.clear();
  }

  // üîç V√©rifier la connexion API
  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/game-words/stats`);
      return response.ok;
    } catch {
      return false;
    }
  }
}

export const databaseWordService = new DatabaseWordService();