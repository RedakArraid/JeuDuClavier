// backend/scripts/fixLanguages.js
// üîß Normaliser les codes de langues dans la base

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixLanguages() {
  console.log('üîß === NORMALISATION DES LANGUES ===\n');
  
  try {
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie\n');

    // 1. Analyser l'√©tat actuel
    console.log('1Ô∏è‚É£ √âtat actuel:');
    const langGroups = await prisma.word.groupBy({
      by: ['language'],
      _count: { text: true },
      orderBy: { _count: { text: 'desc' } }
    });

    langGroups.forEach(lang => {
      console.log(`   üåê "${lang.language}": ${lang._count.text.toLocaleString()} mots`);
    });

    // 2. Normaliser vers des codes courts
    console.log('\n2Ô∏è‚É£ Normalisation:');
    
    // Anglais: english/en ‚Üí en
    const englishUpdate = await prisma.word.updateMany({
      where: {
        language: { in: ['english', 'English', 'ENGLISH'] }
      },
      data: {
        language: 'en'
      }
    });
    console.log(`   üá∫üá∏ Anglais normalis√©: ${englishUpdate.count} mots ‚Üí "en"`);

    // Fran√ßais: french/fr ‚Üí fr  
    const frenchUpdate = await prisma.word.updateMany({
      where: {
        language: { in: ['french', 'French', 'FRENCH'] }
      },
      data: {
        language: 'fr'
      }
    });
    console.log(`   üá´üá∑ Fran√ßais normalis√©: ${frenchUpdate.count} mots ‚Üí "fr"`);

    // 3. V√©rification finale
    console.log('\n3Ô∏è‚É£ √âtat final:');
    const finalLangs = await prisma.word.groupBy({
      by: ['language'],
      _count: { text: true },
      orderBy: { _count: { text: 'desc' } }
    });

    finalLangs.forEach(lang => {
      console.log(`   üåê "${lang.language}": ${lang._count.text.toLocaleString()} mots`);
    });

    // 4. Test de requ√™te pour le jeu
    console.log('\n4Ô∏è‚É£ Test requ√™te jeu:');
    const frSample = await prisma.word.findMany({
      where: { 
        language: 'fr',
        length: { gte: 3, lte: 5 }
      },
      take: 5,
      select: { text: true, length: true }
    });
    
    const enSample = await prisma.word.findMany({
      where: { 
        language: 'en',
        length: { gte: 3, lte: 5 }
      },
      take: 5,
      select: { text: true, length: true }
    });

    console.log(`   üá´üá∑ Fran√ßais: ${frSample.map(w => w.text).join(', ')}`);
    console.log(`   üá∫üá∏ Anglais: ${enSample.map(w => w.text).join(', ')}`);

    console.log('\n‚úÖ Normalisation termin√©e !');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixLanguages();